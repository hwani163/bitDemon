{
  "_args": [
    [
      {
        "raw": "promise-mysql2@*",
        "scope": null,
        "escapedName": "promise-mysql2",
        "name": "promise-mysql2",
        "rawSpec": "*",
        "spec": "*",
        "type": "range"
      },
      "C:\\Users\\Seokhwan\\Desktop\\bitDemon"
    ]
  ],
  "_from": "promise-mysql2@*",
  "_id": "promise-mysql2@1.0.0",
  "_inCache": true,
  "_location": "/promise-mysql2",
  "_nodeVersion": "8.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/promise-mysql2-1.0.0.tgz_1510886348775_0.9469025863800198"
  },
  "_npmUser": {
    "name": "maifuquan",
    "email": "maifuquan@ciwong.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "promise-mysql2@*",
    "scope": null,
    "escapedName": "promise-mysql2",
    "name": "promise-mysql2",
    "rawSpec": "*",
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/promise-mysql2/-/promise-mysql2-1.0.0.tgz",
  "_shasum": "5afd747f146f93fb3359bc1c8f736bbb5fc260bf",
  "_shrinkwrap": null,
  "_spec": "promise-mysql2@*",
  "_where": "C:\\Users\\Seokhwan\\Desktop\\bitDemon",
  "author": {
    "name": "maidol"
  },
  "bugs": {
    "url": "https://github.com/maidol/node-promise-mysql/issues"
  },
  "dependencies": {
    "mysql": "^2.15.0"
  },
  "description": "A promise wrapper for node-mysql",
  "devDependencies": {
    "@types/mysql": "^2.15.0",
    "chai": "^4.0.1",
    "mocha": "^4.0.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-m2e1B+yCAoqrywhxakLX3WRddpATzbcxaNMSCMaQXpJAFIrox2LwKg3zLgxgV6SOEWrG2s4X5NkMfiTGVEjX4Q==",
    "shasum": "5afd747f146f93fb3359bc1c8f736bbb5fc260bf",
    "tarball": "https://registry.npmjs.org/promise-mysql2/-/promise-mysql2-1.0.0.tgz"
  },
  "gitHead": "78978aab4211f5b3a06dcef18f9c07ed7ccbe9b4",
  "homepage": "https://github.com/maidol/node-promise-mysql#readme",
  "keywords": [
    "promise",
    "performance",
    "promises",
    "promises-a",
    "promises-aplus",
    "async",
    "await",
    "deferred",
    "deferreds",
    "future",
    "flow control",
    "dsl",
    "fluent interface",
    "database",
    "mysql",
    "mysql-promise",
    "bluebird",
    "q"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "maifuquan",
      "email": "maifuquan@ciwong.com"
    }
  ],
  "name": "promise-mysql2",
  "optionalDependencies": {},
  "readme": "Promise-mysql2\n==================\n[![Build Status](https://travis-ci.org/lukeb-uk/node-promise-mysql.svg?style=flat&branch=master)](https://travis-ci.org/lukeb-uk/node-promise-mysql?branch=master)\n\nPromise-mysql2 is a wrapper for [mysqljs/mysql](https://github.com/mysqljs/mysql) that wraps function calls with  promises.\n\nnode >= 8.0\n\nTo install promise-mysql, use [npm](http://github.com/isaacs/npm):\n\n```bash\n$ npm install promise-mysql2\n```\n\nPlease refer to [mysqljs/mysql](https://github.com/mysqljs/mysql) for documentation on how to use the mysql functions.\n\nAt the minute only the standard connection (using `.createConnection()`) and the pool (using `.createPool()`) is supported. `createPoolCluster` is not implemented yet.\n\n## Examples\n\n### Connection\n\n**Important note: don't forget to call connection.end() when you're finished otherwise the Node process won't finish**\n\nTo connect, you simply call `.createConnection()` like you would on mysqljs/mysql:\n```javascript\nconst mysql = require('promise-mysql2');\n\nmysql.createConnection({\n\thost: 'localhost',\n\tuser: 'dashaibi',\n\tpassword: 'dashaibi',\n\tdatabase: 'dashaibi'\n}).then((conn) => {\n    // do stuff with conn\n    conn.end();\n});\n```\n\nTo use the promise, you call the methods as you would if you were just using mysqljs/mysql, minus the callback. You then add a .then() with your function in:\n```javascript\nconst mysql = require('promise-mysql2');\n\nmysql.createConnection({\n\thost: 'localhost',\n\tuser: 'dashaibi',\n\tpassword: 'dashaibi',\n\tdatabase: 'dashaibi'\n}).then((conn) => {\n\tlet result = conn.query('select `name` from user');\n\tconn.end();\n\treturn result;\n}).then(([rows, fields]) => {\n\t// list of user\n\tconsole.log(rows);\n});\n```\n\nYou can even chain the promises, using a return within the .then():\n```javascript\nconst mysql = require('promise-mysql2');\nlet connection;\n\nmysql.createConnection({\n\thost: 'localhost',\n\tuser: 'dashaibi',\n\tpassword: 'dashaibi',\n\tdatabase: 'dashaibi'\n}).then((conn) => {\n\tconnection = conn;\n\treturn connection.query('select `id` from user where `name`=\"dashabi\"');\n}).then(([rows, fields]) => {\n\t// Query the items that dashabi owns.\n\tlet result = connection.query('select * from items where `owner`=\"' + rows[0].id + '\" and `name`=\"dashabi\"');\n\tconnection.end();\n\treturn result;\n}).then(([rows, fields]) => {\n\t// Logs out that dashabi owns\n\tconsole.log(rows);\n});\n```\n\nYou can catch errors using the .catch() method. You can still add .then() clauses, they'll just get skipped if there's an error\n```javascript\nconst mysql = require('promise-mysql2');\nlet connection;\n\nmysql.createConnection({\n\thost: 'localhost',\n\tuser: 'dashaibi',\n\tpassword: 'dashaibi',\n\tdatabase: 'dashaibi'\n}).then((conn) => {\n\tconnection = conn;\n\treturn connection.query('select * from tablethatdoesnotexist');\n}).then(() => {\n\tlet result = connection.query('select * from user');\n\tconnection.end();\n\treturn result;\n}).catch((error) => {\n\tif (connection && connection.end) connection.end();\n\t//logs out the error\n\tconsole.log(error);\n});\n\n```\n\nTo use the async/await, you call the methods as you would if you were just using mysqljs/mysql.\n```javascript\nconst mysql = require('promise-mysql2');\nlet connection = await mysql.createConnection({\n\thost: 'localhost',\n\tuser: 'dashaibi',\n\tpassword: 'dashaibi',\n\tdatabase: 'dashaibi'\n});\nconst [rows, fields] = await connection.query('select `id` from user where `name`=\"dashabi\"');\nconnection.end();\nconsole.log(rows);\n```\n\n### Pool\n\nUse pool directly:\n\n```javascript\npool = mysql.createPool({\n\thost: 'localhost',\n\tuser: 'dashaibi',\n\tpassword: 'dashaibi',\n\tdatabase: 'dashaibi'\n  connectionLimit: 10\n});\n\npool.query('select `name` from user').then(([rows, fields]){\n    // Logs out a list of user\n    console.log(rows);\n});\n\n```\n\nGet a connection from the pool:\n\n```javascript\nlet conn;\npool.getConnection().then((connection) => {\n\tconn = connection;\n\tconn.query('select `name` from user').then(...);\n\tconn.release();\n}).catch((err) => {\n\tconn.release();\n\tdone(err);\n});\n```\n\nTo use the async/await, you call the methods as you would if you were just using mysqljs/mysql.\n```javascript\nconst pool = mysql.createPool({\n\thost: 'localhost',\n\tuser: 'dashaibi',\n\tpassword: 'dashaibi',\n\tdatabase: 'dashaibi'\n  connectionLimit: 10\n});\n\nconst [rows, fields] = await pool.query('select `name` from user');\nconsole.log(rows);\n\n// get connection from pool\nconst conn = await pool.getConnection();\nconst [rows, fields] = await connection.query('select `name` from user');\nconn.release();\nconsole.log(rows);\n```\n\n\n## Tests\n\nAt the moment only simple basics tests are implemented using Mocha.\nTo run the tests, you need to connect to a running MySQL server. A database or write permissions are not required.\n\nStart the test suite with\n\n```bash\nDB_HOST=localhost DB_USER=user DB_PWD=pwd npm test\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/maidol/node-promise-mysql.git"
  },
  "scripts": {
    "test": "mocha --exit"
  },
  "version": "1.0.0"
}
